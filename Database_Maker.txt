CREATE TABLE nb_UsersTable (
userID INT NOT NULL AUTO_INCREMENT,
userName VARCHAR(30),
firstName VARCHAR(25),
lastName VARCHAR(25),
password VARCHAR(25),
address VARCHAR(50),
city VARCHAR(50),
state VARCHAR(50),
isAdmin BOOL,
loggedIn BOOL,
PRIMARY KEY (userID)
);

INSERT INTO nb_UsersTable(userName, firstName, lastName, password, address, city, state, isAdmin, loggedIn)
 VALUES('test1', 'first', 'last', 'password', '123 test street', 'Testville', 'New Test', '0', '0');
INSERT INTO nb_UsersTable(userName, firstName, lastName, password, address, city, state, isAdmin, loggedIn)
 VALUES('test2', 'firsty', 'lasty', 'password', '321 test road', 'Testoppolis', 'Testa', '0', '0');
INSERT INTO nb_UsersTable(userName, firstName, lastName, password, address, city, state, isAdmin, loggedIn)
 VALUES('Admin', 'Admin', 'Admin', 'password', '111 Admin', 'Adminville', 'New Admin', '1', '0');
 
CREATE TABLE nb_Inventory (
bookID INT NOT NULL AUTO_INCREMENT,
isbn CHAR(13),
title VARCHAR(128),
author VARCHAR(128),
publisher VARCHAR(128),
genre VARCHAR(128),
price FLOAT,
quantity INT,
inStock BOOL,
PRIMARY KEY (bookID)
);

INSERT INTO nb_Inventory(isbn, title, author, publisher, genre, price, quantity, inStock)
 VALUES('1234567891011', 'Origin: A Novel', 'Dan Brown', 'Doubleday', 'Fiction', '15.00', '12', '1');
INSERT INTO nb_Inventory(isbn, title, author, publisher, genre, price, quantity, inStock)
 VALUES('1110987654321', 'Easy Spanish Step-By-Step', 'Barbara Bregstein', 'McGraw-Hill Education', 'Educational', '10.00', '18', '1');
INSERT INTO nb_Inventory(isbn, title, author, publisher, genre, price, quantity, inStock)
 VALUES('1346792581110', 'Deception Point', 'Dan Brown', 'Atria Books', 'Fiction', '17.00', '8', '1');
INSERT INTO nb_Inventory(isbn, title, author, publisher, genre, price, quantity, inStock)
 VALUES('8527419633164', 'The Catcher in the Rye', 'J.D. Salinger', 'Brown and Company', 'Fiction', '9.00', '20', '1');
INSERT INTO nb_Inventory(isbn, title, author, publisher, genre, price, quantity, inStock)
 VALUES('7945863212315', 'In Cold Blood', 'Truman Capote', 'Random House', 'Non-Fiction', '15.00', '5', '1');
INSERT INTO nb_Inventory(isbn, title, author, publisher, genre, price, quantity, inStock)
 VALUES('1973468252589', 'Silent Spring', 'Rachel Carson', 'Houghton Mifflin', 'Non-Fiction', '10.00', '13', '1');
INSERT INTO nb_Inventory(isbn, title, author, publisher, genre, price, quantity, inStock)
 VALUES('9789469132558', 'Romeo and Juliet', 'William Shakespeare', 'Unknown', 'Play', '19.00', '20', '1');
INSERT INTO nb_Inventory(isbn, title, author, publisher, genre, price, quantity, inStock)
 VALUES('3521468769545', 'The Old Curiosity Shop', 'Charles Dickens', 'Chapman And Hall', 'Fiction', '7.00', '3', '1');
INSERT INTO nb_Inventory(isbn, title, author, publisher, genre, price, quantity, inStock)
 VALUES('6584791325222', 'Fifty Shades of Grey', 'E. L. James', 'Vintage Books', 'Romance', '19.00', '12', '1');
INSERT INTO nb_Inventory(isbn, title, author, publisher, genre, price, quantity, inStock)
 VALUES('9996663332154', 'Pride and Prejudice', 'Jane Austen', 'Whitehall', 'Romance', '15.00', '25', '1');

CREATE TABLE nb_rentPrice(
rentPrice FLOAT NOT NULL,
PRIMARY KEY (rentPrice)
);

INSERT INTO nb_rentPrice(rentPrice)
 VALUES('2.00');

CREATE TABLE nb_Carts(
cartID INT NOT NULL AUTO_INCREMENT,
userID INT NOT NULL,
PRIMARY KEY (cartID, userID),
FOREIGN KEY (userID) REFERENCES nb_UsersTable(userID) ON DELETE CASCADE
);



CREATE TABLE nb_userCarts(
cartID INT NOT NULL,
bookID INT NOT NULL,
isRent BOOL,
PRIMARY KEY (cartID, bookID),
FOREIGN KEY (cartID) REFERENCES nb_Carts(cartID) ON DELETE CASCADE,
FOREIGN KEY (bookID) REFERENCES nb_Inventory(bookID)
);

CREATE TABLE nb_History(
orderNum INT NOT NULL AUTO_INCREMENT,
userID INT NOT NULL,
PRIMARY KEY (orderNum, userID),
FOREIGN KEY (orderNum) REFERENCES nb_userCarts(orderNum),
FOREIGN KEY (userID) REFERENCES nb_UsersTable(userID) ON DELETE CASCADE
);

CREATE TABLE nb_userHistory(
orderNum INT NOT NULL,
bookID INT NOT NULL,
datePurch DATE,
dueDate DATE,
PRIMARY KEY (orderNum, bookID),
FOREIGN KEY (orderNum) REFERENCES nb_History(orderNum) ON DELETE CASCADE,
FOREIGN KEY (bookID) REFERENCES nb_Inventory(bookID)
);